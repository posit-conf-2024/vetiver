---
title: "4 - Monitor your model"
subtitle: "Intro to MLOps with vetiver"
format:
  revealjs: 
    slide-number: true
    footer: <https://posit-conf-2024.github.io/vetiver>
    preview-links: auto
    incremental: true
    theme: [default, styles.scss]
    width: 1280
    height: 720
knitr:
  opts_chunk:
    echo: true
    collapse: true
    comment: "#>"
---

```{r}
#| include: false
#| file: setup.R
```

## Plan for this workshop

::: nonincremental
-   *Versioning*
    -   Managing change in models ‚úÖ
-   *Deploying*
    -   Putting models in REST APIs üéØ
-   *Monitoring*
    -   Tracking model performance üëÄ
:::

## {background-color="white" background-image="https://vetiver.rstudio.com/images/ml_ops_cycle.png" background-size="contain"}

::: footer
:::

## Data for model development

Data that you use while building a model for training/testing

### R

```{r}
library(arrow)
path <- here::here("data", "housing.parquet")
housing <- read_parquet(path)
```

### Python

```{python}
import pandas as pd
housing = pd.read_parquet('./data/housing.parquet')
```


## Data for model monitoring

New data that you predict on after your model deployed

### R

```{r}
library(arrow)
path <- here::here("data", "housing_monitoring.parquet")
housing_new <- read_parquet(path)
```

### Python

```{python}
import pandas as pd
housing_new = pd.read_parquet('./data/housing_monitoring.parquet')
```

## Data for model monitoring

```{r}
#| echo: false
#| fig-width: 9
#| fig-height: 4.5
#| fig-align: center
library(tidyverse)

bind_rows(
    housing |> mutate(monitoring = "Data available at training time"),
    housing_new |> mutate(monitoring = "New data")
) |> 
    ggplot(aes(date)) +
    geom_histogram(alpha = 0.8, fill = "midnightblue", bins = 35) +
    facet_wrap(vars(monitoring), nrow = 2) +
    theme_light() +
    labs(x = NULL)
```


## My model is performing well!

. . .

üë©üèº‚Äçüîß My model returns predictions quickly, doesn't use too much memory or processing power, and doesn't have outages.

. . .

::: {.callout-tip icon=false}

## Metrics

::: nonincremental
- latency
- memory and CPU usage
- uptime
:::

:::

## My model is performing well! 

. . .

üë©üèΩ‚Äçüî¨ My model returns predictions that are close to the true values for the predicted quantity.

. . .

::: {.callout-tip icon=false}

## Metrics

::: nonincremental
- accuracy
- ROC AUC
- F1 score
- RMSE
- log loss
:::

:::

## Model drift üìâ {auto-animate=true}

. . .

::: {.r-fit-text}
DATA drift
:::

## Model drift üìâ {auto-animate=true}

. . .

::: {.r-fit-text}
CONCEPT drift
:::

# When should you retrain your model? üßê

## Your turn üè∫ {transition="slide-in"}

::: {.callout-note icon=false}

## Activity

Using our data, what could be an example of data drift? Concept drift?

:::

```{r}
#| echo: false
library(countdown)
countdown(minutes = 5)
```

# Monitor your model's inputs

## Monitor your model's inputs

Typically it is most useful to compare to your _model development_ data^[Remember you can store metrics of any kind from model development as metadata!]

- Statistical distribution of features individually
- Statistical characteristics of features as a whole
- Applicability scores: <https://applicable.tidymodels.org/>

## Monitor your model's inputs

```{r}
#| echo: false
#| fig-align: center

bind_rows(
    housing |> mutate(monitor = "Training/testing"),
    housing_new |> mutate(monitor = "Monitoring")
) |> 
    ggplot(aes(price, after_stat(density), fill = monitor)) +
    geom_histogram(alpha = 0.5, position = "identity") +
    scale_x_log10(labels = scales::dollar) +
    labs(fill = NULL)
```

## Monitor your model's inputs

```{r}
#| echo: false
#| fig-align: center

bind_rows(
    housing |> mutate(monitor = "Training/testing"),
    housing_new |> mutate(monitor = "Monitoring")
) |> 
    ggplot(aes(waterfront, price, fill = monitor)) +
    geom_boxplot(alpha = 0.8, position = "dodge") +
    scale_y_log10(labels = scales::dollar) +
    labs(fill = NULL)
```

## Your turn üè∫ {transition="slide-in"}

::: {.callout-note icon=false}

## Activity

Create a plot or table comparing the development vs. monitoring distributions of a model input/feature.

How might you make this comparison if you didn't have all the model development data available when monitoring?

What summary statistics might you record during model development, to prepare for monitoring?

:::

```{r}
#| echo: false
library(countdown)
countdown(minutes = 7)
```


# Monitor your model's outputs

## Monitor your model's outputs

- In some ML systems, you eventually get a "real" result after making a prediction
- If a realtor used a model like this one before putting a house on the market, they would get:
    - A predicted price from their model
    - A real price result after the home was sold
- In this case, we can monitor our model's statistical performance    
- If you don't ever get a "real" result, you can still monitor the distribution of your outputs

::: aside
Read about [real problems](https://www.wired.com/story/zillow-ibuyer-real-estate/) that [have arisen](https://www.wsj.com/articles/zillow-offers-real-estate-algorithm-homes-ibuyer-11637159261) in building predictive pricing models for real estate.
:::

## Monitor your model's outputs

### Python

```{python}
from vetiver import vetiver_endpoint, predict, compute_metrics, plot_metrics
from sklearn.metrics import root_mean_squared_error, r2_score, mean_absolute_error
from datetime import timedelta
import numpy as np

url = "https://colorado.posit.co/rsc/seattle-housing-python/predict"
endpoint = vetiver_endpoint(url)
housing_new["pred"] = predict(endpoint = url, 
    data = housing_new[["bedrooms", "bathrooms", "sqft_living", "yr_built"]])
housing_new["price"] = np.log10(housing_new["price"])

td = timedelta(weeks = 2)
metric_set = [root_mean_squared_error, r2_score, mean_absolute_error]

m = compute_metrics(
    data = housing_new,
    date_var = "date", 
    period = td,
    metric_set = metric_set,
    truth = "price",
    estimate = "pred")

metrics_plot = plot_metrics(m)
```

```{python}
#| echo: false
import plotly.io as pio
pio.write_html(metrics_plot, file="plot.html", auto_open=False)
```

## Monitor your model's outputs

```{r}
#| echo: false
#| eval: true
#| fig-align: center
htmltools::includeHTML("plot.html")
```

## Monitor your model's outputs

### R

```{r}
#| fig-align: center
#| output-location: slide

library(vetiver)
library(tidymodels)
url <- "https://colorado.posit.co/rsc/seattle-housing-rstats/predict"
endpoint <- vetiver_endpoint(url)

augment(endpoint, new_data = housing_new) |>
    mutate(price = log10(price)) |>
    vetiver_compute_metrics(
        date,
        "week",
        price,
        .pred,
        metric_set = metric_set(rmse, rsq, mae)
    ) |>
    vetiver_plot_metrics()
```

## Your turn üè∫ {transition="slide-in"}

::: {.callout-note icon=false}

## Activity

Use the functions for metrics monitoring from vetiver to create a monitoring visualization.

Choose a different set of metrics or time aggregation.

Note that there are functions for using pins as a way to version and update monitoring results too!

:::

```{r}
#| echo: false
library(countdown)
countdown(minutes = 5)
```


# Feedback loops üîÅ

Deployment of an ML model may *alter* the training data 

- Movie recommendation systems on Netflix, Disney+, Hulu, etc
- Identifying fraudulent credit card transactions at Stripe
- Recidivism models

::: footer
[*Building Machine Learning Pipelines* by Hapke & Nelson](https://www.oreilly.com/library/view/building-machine-learning/9781492053187/)
:::

# Feedback loops can have unexpected consequences

::: footer
[*Building Machine Learning Pipelines* by Hapke & Nelson](https://www.oreilly.com/library/view/building-machine-learning/9781492053187/)
:::

## Feedback loops üîÅ

- Users take some action as a result of a prediction
- Users rate or correct the quality of a prediction
- Produce annotations (crowdsource or expert)
- Produce feedback automatically

::: footer
[*Building Machine Learning Pipelines* by Hapke & Nelson](https://www.oreilly.com/library/view/building-machine-learning/9781492053187/)
:::

## Your turn üè∫ {transition="slide-in"}

::: {.callout-note icon=false}

## Activity

What is a possible feedback loop for the Seattle housing data?

Do you think your example would be harmful or helpful? To whom?

:::

```{r}
#| echo: false
library(countdown)
countdown(minutes = 5)
```


## ML metrics ‚û°Ô∏è organizational outcomes

- Are machine learning metrics like F1 score or RMSE what matter to your organization?
- Consider how ML metrics are related to important outcomes or KPIs for your business or org
- There isn't always a 1-to-1 mapping üòî
- You can **partner** with stakeholders to monitor what's truly important about your model

## Your turn üè∫ {transition="slide-in"}

::: {.callout-note icon=false}

## Activity

Let's say that the most important organizational outcome for a Seattle realtor is how accurate a pricing model is in terms of **percentage** on prices in USD rather than an absolute value. (Think about being 20% wrong vs. $20,000 wrong.) 

We can measure this with the **mean absolute percentage error**.

Compute this quantity with the monitoring data, and aggregate by week/month, number of bedrooms/bathrooms, or waterfront status.

For extra credit, make a visualization showing your results.

:::

```{r}
#| echo: false
countdown(minutes = 7)
```


## ML metrics ‚û°Ô∏è organizational outcomes

::: panel-tabset

### R

```{r}
augment(endpoint, housing_new) |> 
    mutate(.pred = 10 ^ .pred) |> 
    group_by(waterfront) |> 
    mape(price, .pred)
```

### Python

```{python}
from sklearn.metrics import mean_absolute_percentage_error

housing_new \
    .groupby("waterfront") \
    .apply(lambda x: mean_absolute_percentage_error(
        y_pred= 10 ** x["pred"], y_true= 10 ** x["price"]), include_groups=False)
```


## Possible model monitoring artifacts

- Adhoc analysis that you post in Slack
- Report that you share in Google Drive
- Fully automated dashboard published to Posit Connect

::: footer
[5 Levels of MLOps Maturity](https://www.nannyml.com/blog/5-levels-of-mlops-maturity)
:::

## Possible model monitoring artifacts

![](images/vetiver-templates.png){fig-align="center"}

## Your turn üè∫ {transition="slide-in"}

::: {.callout-note icon=false}

## Activity

Create a Quarto report or R Markdown dashboard for model monitoring.

Publish your document to Connect.

:::

```{r}
#| echo: false
library(countdown)
countdown(minutes = 15)
```

## 

::: r-fit-text
We made it! üéâ
:::

## Your turn üè∫ {transition="slide-in"}

::: {.callout-note icon=false}

## Activity

What is one thing you learned that surprised you?

What is one thing you learned that you plan to use?

:::

```{r}
#| echo: false
library(countdown)
countdown(minutes = 5)
```

## Resources to keep learning

-   Documentation at <https://vetiver.posit.co/>

-   Isabel's talk from rstudio::conf() 2022 on [Demystifying MLOps](https://www.rstudio.com/conference/2022/talks/demystifying-mlops/)


-   End-to-end demos from Posit Solution Engineering in [R](https://github.com/sol-eng/bike_predict) and [Python](https://github.com/sol-eng/bike_predict_python)

-   Are you on the right track with your MLOps system? Use the rubric in ["The ML Test Score: A Rubric for ML Production Readiness and Technical Debt Reduction"](https://research.google/pubs/pub46555/) by Breck et al (2017)

- Want to learn about how MLOps is being practiced? Read one of our favorite üòç recent papers, ["Operationalizing Machine Learning: An Interview Study"](https://arxiv.org/abs/2209.09125) by Shankar et al (2022)

. . .

Follow Posit and/or us on your preferred social media for updates!

# Submit feedback before you leave üó≥Ô∏è
# TODO: update link
[pos.it/conf-workshop-survey](https://pos.it/conf-workshop-survey)

Your feedback is crucial! Data from the survey informs curriculum and format decisions for future conf workshops and we really appreciate you taking the time to provide it.
